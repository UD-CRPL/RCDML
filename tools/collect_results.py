###########################################################################################################
# Tool: collect_results
# Purpose: Collects the AUC score for a given list of experimental runs. Used to collect 1k iteration results
###########################################################################################################
import pandas as pd
import numpy as np
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
import os
from pathlib import Path

def make_result_dir(path):
    Path(path).mkdir(parents=True, exist_ok=True)

# Used to parse through the lists of results and returns them as a list
def transform(x):
    result = x.replace("]","")
    result = result.replace("[","")
    result = result.replace(",","")
    result = result.replace("\n", "")
    result = result.split(" ")
    result = list(filter(None, result))
    for i in range(0, len(result)):
        result[i] = float(result[i])
    result = np.concatenate(result, axis=None)
    return result

# Gets sensitivity, specificity, and ROC-AUC score from the results file generated by the RCDML model
def get_auc(data_path, date, fs, classifier):
    df = pd.read_csv(data_path + "/" + drug + "/" + date + "/cv/" + fs + "/" + classifier + "/results.tsv" , sep="\t")
    # Parses through and creates the list of all results
    true = np.concatenate(df['true_label'].apply(lambda x: transform(x)).values, axis=None)
    pred = np.concatenate(df['pred'].apply(lambda x: transform(x)).values, axis=None)
    prob = np.concatenate(df['pred_prob'].apply(lambda x: transform(x)).values, axis=None)
    # Uses the true labels and the predicted labels to generate the confusion matrix
    tn, fp, fn, tp = confusion_matrix(true, pred).ravel()
    sensitivity = (tp) / (tp + fn)
    specificity = (tn) / (tn + fp)
    # Uses the true labels and the predicted probabilities to generate the ROC-AUC score
    roc = roc_auc_score(true, prob)
    return sensitivity, specificity, roc

start = 1
end = 1001
drug = "Sorafenib"
date = "02-28-2022"
fs = 'pca'
classifier = 'rf'
results = pd.DataFrame(columns=['iteration', 'auc'])
# path where the results are stored
result_path = "/lustre/schandra_crpl/users/2042/results/beatAML/jobarray_test/"
run_list = [name for name in os.listdir(result_path) if os.path.isdir(os.path.join(result_path, name))]
run_list =  list(map(int, run_list))
all_runs = [i for i in range(start, end)]
run_set = set(run_list)
all_set = set(all_runs)
difference = all_set - run_set

for iteration in range(start, end):
    data_path = result_path + str(iteration) + "/"
    sensitivity, specificity, auc = get_auc(data_path, date, fs, classifier)
    result = {"iteration":iteration, "auc": auc}
    df = pd.DataFrame(result, index=[0])
    results = results.append(result)

results.to_csv(result_path + drug + "_pca_features_results.tsv", sep ="\t", index = false)
